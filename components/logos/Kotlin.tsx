/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import {MathUtils} from "three";
import {useFrame} from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    XMLID_2_: THREE.Mesh
    Curve: THREE.Mesh
    Curve001: THREE.Mesh
  }
  materials: {
    ['Material.002']: THREE.MeshStandardMaterial
    ['Material.003']: THREE.MeshStandardMaterial
  }
}

const rad90deg = MathUtils.degToRad(90)
const Radius = 3

export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/kotlin.gltf') as GLTFResult
  useFrame(({clock}) => {
    if (!group.current) return;

    const time = (clock.getElapsedTime() / 2)  + MathUtils.degToRad(120)
    group.current.position.x = Radius * Math.sin(time)
    group.current.position.z = Radius * Math.cos(time)
    group.current.position.y = Radius * Math.sin(time) / 4
    group.current.rotation.z = time * 2
  })
  return (
      <group ref={group} scale={[0.2, 0.2, 0.2]} rotation={[rad90deg, 0, 0]} {...props} dispose={null}>
      <mesh geometry={nodes.XMLID_2_.geometry} material={materials['Material.002']} position={[0.29, 0, 0.72]} />
      <mesh geometry={nodes.Curve.geometry} material={materials['Material.002']} position={[-0.38, 0, -0.58]} scale={[0.54, 1, 0.54]} />
      <mesh geometry={nodes.Curve001.geometry} material={materials['Material.003']} position={[0.09, 0, -0.14]} scale={[0.54, 1, 0.54]} />
    </group>
  )
}

useGLTF.preload('/kotlin.gltf')
