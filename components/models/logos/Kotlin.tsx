/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import {MathUtils} from "three";
import {useFrame} from "@react-three/fiber";
import {HasPhase, RADIUS} from "../LogoOrbit";

type GLTFResult = GLTF & {
  nodes: {
    XMLID_2_: THREE.Mesh
    Curve: THREE.Mesh
    Curve001: THREE.Mesh
  }
  materials: {
    ['Material.002']: THREE.MeshStandardMaterial
    ['Material.003']: THREE.MeshStandardMaterial
  }
}

export default function Model({ ...props }: JSX.IntrinsicElements['group'] & HasPhase) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/kotlin.gltf') as GLTFResult


  useFrame(({clock}) => {
    if (!group?.current) return

    const time = clock.getElapsedTime() / 4
    const {phase} = props
    const x = RADIUS * Math.sin(time + phase)
    const y = RADIUS * Math.cos(time + phase)
    const z = RADIUS * Math.sin(time + phase) / 4

    group.current.position.set(x, z, y)
  })

  return (
      <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.XMLID_2_.geometry} material={materials['Material.002']} position={[0.29, 0, 0.72]} />
      <mesh geometry={nodes.Curve.geometry} material={materials['Material.002']} position={[-0.38, 0, -0.58]} scale={[0.54, 1, 0.54]} />
      <mesh geometry={nodes.Curve001.geometry} material={materials['Material.003']} position={[0.09, 0, -0.14]} scale={[0.54, 1, 0.54]} />
    </group>
  )
}

useGLTF.preload('/models/logos/kotlin.gltf')
