/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import {CubeCamera, LinearMipmapLinearFilter, RGBFormat, WebGLCubeRenderTarget} from 'three'
import React, {useRef} from 'react'
import {useGLTF} from '@react-three/drei'
import {GLTF} from 'three-stdlib'
import {useFrame, useThree} from "@react-three/fiber";

type GLTFResult = GLTF & {
    nodes: {
        Walls: THREE.Mesh
        Frame: THREE.Mesh
        Floor: THREE.Mesh
        FrameContent: THREE.Mesh
        Lamp: THREE.Mesh
        Bricks: THREE.Mesh
    }
    materials: {}
}

export default function Model({...props}: JSX.IntrinsicElements['group']) {
    const group = useRef<THREE.Group>(null)
    const {nodes} = useGLTF('/models/room.gltf') as GLTFResult
    const {scene, gl} = useThree()

    const reflectiveMaterial = new THREE.MeshPhysicalMaterial({
        roughness: .1,
        metalness: .9,
        color: "#ffffff",
        opacity: .5,
        emissive: '#c2c2c2',
        emissiveIntensity: .2,
        fog: true
    })

    const cubeRendererTarget = new WebGLCubeRenderTarget(1024, {
        format: RGBFormat,
        generateMipmaps: true,
        minFilter: LinearMipmapLinearFilter
    })
    const cubeCamera = new CubeCamera(1, 1000, cubeRendererTarget)

    cubeCamera.position.set(-2.14, -3.6, 3.6)
    scene.add(cubeCamera)

    reflectiveMaterial.setValues({
        envMap: cubeCamera.renderTarget.texture
    })

    const material = new THREE.MeshStandardMaterial({color: "#a4a4a4"})

    useFrame(() => cubeCamera.update(gl, scene))

    return (
        <group
          ref={group}
          {...props}
          dispose={null}
        >
            {/*<OrbitControls/>*/}
            <mesh
              geometry={nodes.Walls.geometry}
              material={material}
            />
            <mesh
              geometry={nodes.Frame.geometry}
              material={material}
            />
            <mesh
              geometry={nodes.Floor.geometry}
              material={reflectiveMaterial}
            />
            <mesh
              geometry={nodes.FrameContent.geometry}
              material={material}
            />
            <mesh
              geometry={nodes.Lamp.geometry}
              material={material}
            />
            <mesh
              geometry={nodes.Bricks.geometry}
              material={material}
            />
        </group>
    )
}

useGLTF.preload('/models/room.gltf')
